openapi: 3.0.0
info:
  title: Blog API
  description: Production-ready modular monolithic REST API server for blog application
  version: 1.0.0
  contact:
    name: Blog API Team
    email: api@example.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.example.com/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [ADMIN, EDITOR, READER]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        slug:
          type: string
        content:
          type: string
        excerpt:
          type: string
        status:
          type: string
          enum: [DRAFT, PUBLISHED, ARCHIVED]
        imageUrl:
          type: string
          format: uri
        tags:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        authorId:
          type: string

    Comment:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        authorId:
          type: string
        postId:
          type: string
        parentId:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: string
        details:
          type: object

paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Service is healthy
        '503':
          description: Service is unhealthy

  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
                  minLength: 6
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: [ADMIN, EDITOR, READER]
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /posts:
    get:
      summary: Get all posts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, PUBLISHED, ARCHIVED]
        - name: tags
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Posts retrieved successfully

    post:
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
                excerpt:
                  type: string
                status:
                  type: string
                  enum: [DRAFT, PUBLISHED, ARCHIVED]
                imageUrl:
                  type: string
                  format: uri
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Post created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /posts/search:
    get:
      summary: Search posts
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Search results retrieved successfully

  /posts/{id}:
    get:
      summary: Get post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post retrieved successfully
        '404':
          description: Post not found

    put:
      summary: Update post
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                excerpt:
                  type: string
                status:
                  type: string
                  enum: [DRAFT, PUBLISHED, ARCHIVED]
                imageUrl:
                  type: string
                  format: uri
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Post updated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Post not found

    delete:
      summary: Delete post
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Post not found